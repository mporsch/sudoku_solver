#include "grid_check_impl.h"
#include "grid_parse.h"

#include <cstdlib>
#include <deque>
#include <sstream>

struct CheckExpected
{
  bool operator()(Grid::container sorted)
  {
    return GetNextRange() == sorted;
  }

  Grid::container GetNextRange()
  {
    using C = Grid::container;
    using F = Field;

    // the ranges to check
    static auto ranges = std::deque<C>{
      // field rows
      C{F{5}, F{3}, F{4}, F{6}, F{7}, F{8}, F{9}, F{1}, F{2}},
      C{F{6}, F{7}, F{2}, F{1}, F{9}, F{5}, F{3}, F{4}, F{8}},
      C{F{1}, F{9}, F{8}, F{3}, F{4}, F{2}, F{5}, F{6}, F{7}},
      C{F{8}, F{5}, F{9}, F{7}, F{6}, F{1}, F{4}, F{2}, F{3}},
      C{F{4}, F{2}, F{6}, F{8}, F{5}, F{3}, F{7}, F{9}, F{1}},
      C{F{7}, F{1}, F{3}, F{9}, F{2}, F{4}, F{8}, F{5}, F{6}},
      C{F{9}, F{6}, F{1}, F{5}, F{3}, F{7}, F{2}, F{8}, F{4}},
      C{F{2}, F{8}, F{7}, F{4}, F{1}, F{9}, F{6}, F{3}, F{5}},
      C{F{3}, F{4}, F{5}, F{2}, F{8}, F{6}, F{1}, F{7}, F{9}},
      // field columns
      C{F{5}, F{6}, F{1}, F{8}, F{4}, F{7}, F{9}, F{2}, F{3}},
      C{F{3}, F{7}, F{9}, F{5}, F{2}, F{1}, F{6}, F{8}, F{4}},
      C{F{4}, F{2}, F{8}, F{9}, F{6}, F{3}, F{1}, F{7}, F{5}},
      C{F{6}, F{1}, F{3}, F{7}, F{8}, F{9}, F{5}, F{4}, F{2}},
      C{F{7}, F{9}, F{4}, F{6}, F{5}, F{2}, F{3}, F{1}, F{8}},
      C{F{8}, F{5}, F{2}, F{1}, F{3}, F{4}, F{7}, F{9}, F{6}},
      C{F{9}, F{3}, F{5}, F{4}, F{7}, F{8}, F{2}, F{6}, F{1}},
      C{F{1}, F{4}, F{6}, F{2}, F{9}, F{5}, F{8}, F{3}, F{7}},
      C{F{2}, F{8}, F{7}, F{3}, F{1}, F{6}, F{4}, F{5}, F{9}},
      // blocks by row and column
      C{F{5}, F{3}, F{4}, F{2}, F{7}, F{6}, F{1}, F{9}, F{8}},
      C{F{6}, F{7}, F{8}, F{5}, F{9}, F{1}, F{3}, F{4}, F{2}},
      C{F{9}, F{1}, F{2}, F{8}, F{4}, F{3}, F{5}, F{6}, F{7}},
      C{F{8}, F{5}, F{9}, F{6}, F{2}, F{4}, F{7}, F{1}, F{3}},
      C{F{7}, F{6}, F{1}, F{3}, F{5}, F{8}, F{9}, F{2}, F{4}},
      C{F{4}, F{2}, F{3}, F{1}, F{9}, F{7}, F{8}, F{5}, F{6}},
      C{F{9}, F{6}, F{1}, F{7}, F{8}, F{2}, F{3}, F{4}, F{5}},
      C{F{5}, F{3}, F{7}, F{9}, F{1}, F{4}, F{2}, F{8}, F{6}},
      C{F{2}, F{8}, F{4}, F{5}, F{3}, F{6}, F{1}, F{7}, F{9}}};

    auto range = std::move(ranges.front());
    ranges.pop_front();
    return range;
  }
};

int main()
{
  auto iss = std::istringstream(
R"(+~~~+~~~+~~~+~~~+~~~+~~~+~~~+~~~+~~~+
| 5 : 3 : 4 | 6 : 7 : 8 | 9 : 1 : 2 |
+---+---+---+---+---+---+---+---+---+
| 6 : 7 : 2 | 1 : 9 : 5 | 3 : 4 : 8 |
+---+---+---+---+---+---+---+---+---+
| 1 : 9 : 8 | 3 : 4 : 2 | 5 : 6 : 7 |
+~~~+~~~+~~~+~~~+~~~+~~~+~~~+~~~+~~~+
| 8 : 5 : 9 | 7 : 6 : 1 | 4 : 2 : 3 |
+---+---+---+---+---+---+---+---+---+
| 4 : 2 : 6 | 8 : 5 : 3 | 7 : 9 : 1 |
+---+---+---+---+---+---+---+---+---+
| 7 : 1 : 3 | 9 : 2 : 4 | 8 : 5 : 6 |
+~~~+~~~+~~~+~~~+~~~+~~~+~~~+~~~+~~~+
| 9 : 6 : 1 | 5 : 3 : 7 | 2 : 8 : 4 |
+---+---+---+---+---+---+---+---+---+
| 2 : 8 : 7 | 4 : 1 : 9 | 6 : 3 : 5 |
+---+---+---+---+---+---+---+---+---+
| 3 : 4 : 5 | 2 : 8 : 6 | 1 : 7 : 9 |
+~~~+~~~+~~~+~~~+~~~+~~~+~~~+~~~+~~~+)"
  );

  Grid grid;
  iss >> grid;

  return Checker<CheckExpected>{grid} ? EXIT_SUCCESS : EXIT_FAILURE;
}
